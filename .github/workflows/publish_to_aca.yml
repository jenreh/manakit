name: 03 Publish GHCR image to Azure Container App

on:
  workflow_dispatch:
    inputs:
      tag:
        description: Tag to mirror (required)
        required: true
        type: string

permissions:
  contents: read
  packages: read
  id-token: write # Required for Azure OIDC login

concurrency:
  group: publish-to-acr-${{ github.event.inputs.tag }}
  cancel-in-progress: false

jobs:
  mirror-to-acr:
    name: Mirror image from GHCR to ACR
    runs-on: ubuntu-latest
    environment: DEV
    outputs:
      release_tag: ${{ steps.tags.outputs.release_tag }}
      acr_image: ${{ steps.set_outputs.outputs.acr_image }}
    env:
      # Source image (GHCR)
      GHCR_IMAGE: ghcr.io/jenreh/manakit-app
      # Target ACR settings. Configure these as Repository Variables or set here.
      # Example: ACR_NAME=myregistry; ACR_LOGIN_SERVER=myregistry.azurecr.io
      ACR_NAME: ${{ vars.ACR_NAME }}
      ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

    steps:
      - name: Derive ACR login server when missing
        run: |
          if [ -n "${ACR_NAME}" ] && [ -z "${ACR_LOGIN_SERVER}" ]; then
            echo "ACR_LOGIN_SERVER=${ACR_NAME}.azurecr.io" >> "$GITHUB_ENV"
          fi

      - name: Install jq (for JSON parsing)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Validate ACR configuration
        run: |
          if [ -z "${ACR_NAME}" ] || [ -z "${ACR_LOGIN_SERVER}" ]; then
            echo "ACR_NAME and ACR_LOGIN_SERVER must be set (e.g., repo Variables)." >&2
            exit 1
          fi

      - name: Read input tag
        id: tags
        shell: bash
        run: |
          set -euo pipefail
          if [ -z "${{ inputs.tag }}" ]; then
            echo "Input 'tag' is required." >&2
            exit 1
          fi
          echo "tags=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          echo "release_tag=${{ inputs.tag }}" >> "$GITHUB_OUTPUT"
          echo "Will mirror tag: ${{ inputs.tag }}"

      - name: Log in to GHCR (source)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set active subscription (defensive)
        run: |
          az account set --subscription "${AZURE_SUBSCRIPTION_ID}"
          az account show -o table

      - name: Log in to ACR (dest)
        run: |
          az acr login --name "$ACR_NAME"

      - name: Install skopeo
        run: |
          sudo apt-get update
          sudo apt-get install -y skopeo

      - name: Mirror images (preserve multi-arch)
        shell: bash
        env:
          ACR_IMAGE: ${{ env.ACR_LOGIN_SERVER }}/manakit-app
        run: |
          set -euo pipefail
          AUTHFILE="$HOME/.docker/config.json"
          for tag in ${{ steps.tags.outputs.tags }}; do
            echo "Mirroring $GHCR_IMAGE:$tag -> $ACR_IMAGE:$tag"
            skopeo copy --all \
              --src-authfile "$AUTHFILE" \
              --dest-authfile "$AUTHFILE" \
              docker://$GHCR_IMAGE:$tag docker://$ACR_IMAGE:$tag
          done

      - name: Set job outputs
        id: set_outputs
        env:
          ACR_IMAGE: ${{ env.ACR_LOGIN_SERVER }}/manakit-app
        run: |
          echo "acr_image=$ACR_IMAGE" >> "$GITHUB_OUTPUT"

  publish-to-aca:
    name: Publish to Azure Container App
    runs-on: ubuntu-latest
    environment: DEV
    needs: mirror-to-acr
    env:
      CONTAINERAPP_NAME: ${{ vars.CONTAINERAPP_NAME }}
      CONTAINERAPP_RESOURCE_GROUP: ${{ vars.CONTAINERAPP_RESOURCE_GROUP }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ACR_NAME: ${{ vars.ACR_NAME }}
      ACR_LOGIN_SERVER: ${{ vars.ACR_LOGIN_SERVER }}

    steps:
      - name: Derive ACR login server when missing
        run: |
          if [ -n "${ACR_NAME}" ] && [ -z "${ACR_LOGIN_SERVER}" ]; then
            echo "ACR_LOGIN_SERVER=${ACR_NAME}.azurecr.io" >> "$GITHUB_ENV"
          fi

      - name: Azure login via OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set active subscription (defensive)
        run: |
          az account set --subscription "${AZURE_SUBSCRIPTION_ID}"
          az account show -o table

      - name: Install Azure Container Apps CLI extension
        run: |
          az extension add -n containerapp --yes || az extension update -n containerapp

      - name: Ensure Container App can pull from ACR (managed identity + RBAC + registry binding)
        env:
          ACR_NAME: ${{ env.ACR_NAME }}
          ACR_LOGIN_SERVER: ${{ env.ACR_LOGIN_SERVER }}
          CONTAINERAPP_NAME: ${{ env.CONTAINERAPP_NAME }}
          CONTAINERAPP_RESOURCE_GROUP: ${{ env.CONTAINERAPP_RESOURCE_GROUP }}
        run: |
          set -euo pipefail

          if [ -z "${ACR_NAME}" ] || [ -z "${CONTAINERAPP_NAME}" ] || [ -z "${CONTAINERAPP_RESOURCE_GROUP}" ]; then
            echo "ACR_NAME, CONTAINERAPP_NAME and CONTAINERAPP_RESOURCE_GROUP must be set." >&2
            exit 1
          fi

          echo "Configuring Container App identity and ACR access..."
          ACR_ID=$(az acr show --name "${ACR_NAME}" --subscription "${AZURE_SUBSCRIPTION_ID}" --query id -o tsv)

          # Enable system-assigned identity if missing
          ID_TYPE=$(az containerapp show \
            --name "${CONTAINERAPP_NAME}" \
            --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
            --subscription "${AZURE_SUBSCRIPTION_ID}" \
            --query "identity.type" -o tsv || echo "None")

          if [ "${ID_TYPE}" = "None" ] || [ -z "${ID_TYPE}" ]; then
            az containerapp identity assign \
              --name "${CONTAINERAPP_NAME}" \
              --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
              --subscription "${AZURE_SUBSCRIPTION_ID}" \
              --system-assigned 1>/dev/null
          fi

          # Ensure AcrPull (or ABAC reader) on ACR for the app's identity
          PRINCIPAL_ID=$(az containerapp show \
            --name "${CONTAINERAPP_NAME}" \
            --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
            --subscription "${AZURE_SUBSCRIPTION_ID}" \
            --query "identity.principalId" -o tsv)

          # If the Container App has no system-assigned identity, try to extract
          # the principalId from the first userAssigned identity (values()[0].principalId)
          if [ -z "${PRINCIPAL_ID}" ]; then
            PRINCIPAL_ID=$(az containerapp show \
              --name "${CONTAINERAPP_NAME}" \
              --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
              --subscription "${AZURE_SUBSCRIPTION_ID}" \
              --query "identity.userAssignedIdentities | values(@)[0].principalId" -o tsv)
          fi

          HAVE_PULL=$(az role assignment list \
            --assignee "${PRINCIPAL_ID}" \
            --scope "${ACR_ID}" \
            --subscription "${AZURE_SUBSCRIPTION_ID}" \
            --query "[?roleDefinitionName=='AcrPull' || roleDefinitionName=='Container Registry Repository Reader'] | length(@)" -o tsv)

          if [ "${HAVE_PULL}" = "0" ]; then
            # Prefer ABAC Reader if registry is ABAC-enabled; otherwise AcrPull
            set +e
            az role assignment create \
              --assignee "${PRINCIPAL_ID}" \
              --role "Container Registry Repository Reader" \
              --scope "${ACR_ID}" \
              --subscription "${AZURE_SUBSCRIPTION_ID}" 1>/dev/null
            ABAC_RC=$?
            set -e
            if [ $ABAC_RC -ne 0 ]; then
              az role assignment create \
                --assignee "${PRINCIPAL_ID}" \
                --role "AcrPull" \
                --scope "${ACR_ID}" \
                --subscription "${AZURE_SUBSCRIPTION_ID}" 1>/dev/null
            fi
          fi

          # Bind the registry using system identity; skip if already configured
          EXISTING=$(az containerapp registry list \
            --name "${CONTAINERAPP_NAME}" \
            --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
            --subscription "${AZURE_SUBSCRIPTION_ID}" \
            --query "[?server=='${ACR_LOGIN_SERVER}'] | length(@)" -o tsv || echo 0)

          if [ "${EXISTING}" != "0" ]; then
            echo "Registry ${ACR_LOGIN_SERVER} already configured for Container App. Skipping."
          else
            echo "Setting registry ${ACR_LOGIN_SERVER} for Container App using system identity..."
            timeout 180s az containerapp registry set \
              --name "${CONTAINERAPP_NAME}" \
              --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
              --subscription "${AZURE_SUBSCRIPTION_ID}" \
              --server "${ACR_LOGIN_SERVER}" \
              --identity system \
              --only-show-errors
          fi

      - name: Deploy to Azure Container App
        env:
          RELEASE_TAG: ${{ needs.mirror-to-acr.outputs.release_tag }}
          ACR_IMAGE: ${{ needs.mirror-to-acr.outputs.acr_image }}
        run: |
          set -euo pipefail

          if [ -z "${CONTAINERAPP_NAME}" ] || [ -z "${CONTAINERAPP_RESOURCE_GROUP}" ]; then
            echo "CONTAINERAPP_NAME and CONTAINERAPP_RESOURCE_GROUP must be set (environment or repo variables)." >&2
            exit 1
          fi

          echo "Deploying image ${ACR_IMAGE}:${RELEASE_TAG} to Container App ${CONTAINERAPP_NAME} in RG ${CONTAINERAPP_RESOURCE_GROUP}"
          az containerapp update \
            --name "${CONTAINERAPP_NAME}" \
            --resource-group "${CONTAINERAPP_RESOURCE_GROUP}" \
            --subscription "${AZURE_SUBSCRIPTION_ID}" \
            --image "${ACR_IMAGE}:${RELEASE_TAG}"

      - name: Summary
        run: |
          echo "✅ Successfully deployed to Azure Container App with image: ${{ needs.mirror-to-acr.outputs.acr_image }}:${{ needs.mirror-to-acr.outputs.release_tag }}"
